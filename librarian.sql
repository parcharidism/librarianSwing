--------------------------------------------------------
--  File created - Τετάρτη-Δεκεμβρίου-20-2023   
--------------------------------------------------------
--------------------------------------------------------
--  DDL for Sequence AUTHORS_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "IT011873"."AUTHORS_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 14 NOCACHE  ORDER  NOCYCLE   ;
--------------------------------------------------------
--  DDL for Sequence BOOKS_CATEGORIES_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "IT011873"."BOOKS_CATEGORIES_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 9 NOCACHE  ORDER  NOCYCLE   ;
--------------------------------------------------------
--  DDL for Sequence BOOKS_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "IT011873"."BOOKS_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 22 NOCACHE  ORDER  NOCYCLE   ;
--------------------------------------------------------
--  DDL for Sequence BOOKS_STOCK_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "IT011873"."BOOKS_STOCK_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 NOCACHE  ORDER  NOCYCLE   ;
--------------------------------------------------------
--  DDL for Sequence BOOK_LENDING_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "IT011873"."BOOK_LENDING_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 27 NOCACHE  ORDER  NOCYCLE   ;
--------------------------------------------------------
--  DDL for Sequence LEND_CAT_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "IT011873"."LEND_CAT_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 16 NOCACHE  ORDER  NOCYCLE   ;
--------------------------------------------------------
--  DDL for Sequence LOG_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "IT011873"."LOG_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 171 NOCACHE  ORDER  NOCYCLE   ;
--------------------------------------------------------
--  DDL for Sequence PUB_HOUSES_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "IT011873"."PUB_HOUSES_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 6 NOCACHE  ORDER  NOCYCLE   ;
--------------------------------------------------------
--  DDL for Sequence ROLES_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "IT011873"."ROLES_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 4 NOCACHE  ORDER  NOCYCLE   ;
--------------------------------------------------------
--  DDL for Sequence USERS_ID_SEQ
--------------------------------------------------------

   CREATE SEQUENCE  "IT011873"."USERS_ID_SEQ"  MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 18 NOCACHE  ORDER  NOCYCLE   ;
--------------------------------------------------------
--  DDL for Table AUTHORS
--------------------------------------------------------

  CREATE TABLE "IT011873"."AUTHORS" 
   (	"ID" NUMBER(*,0), 
	"NAME" VARCHAR2(30 BYTE), 
	"SURNAME" VARCHAR2(30 BYTE), 
	"COUNTRY" VARCHAR2(30 BYTE), 
	"BIO" VARCHAR2(250 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table BOOKS
--------------------------------------------------------

  CREATE TABLE "IT011873"."BOOKS" 
   (	"ID" NUMBER(*,0), 
	"TITLE" VARCHAR2(50 BYTE), 
	"CATEGORY" NUMBER(*,0), 
	"PUBLISH_DATE" DATE, 
	"PUBLISHING_HOUSE" NUMBER(*,0), 
	"LEND_CATEGORY" NUMBER(*,0), 
	"ISBN" VARCHAR2(13 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table BOOKS_CATEGORIES
--------------------------------------------------------

  CREATE TABLE "IT011873"."BOOKS_CATEGORIES" 
   (	"ID" NUMBER(*,0), 
	"CAT_DESC" VARCHAR2(20 BYTE), 
	"SUB_CATEGORY" NUMBER(*,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table BOOKS_STOCK
--------------------------------------------------------

  CREATE TABLE "IT011873"."BOOKS_STOCK" 
   (	"ID" NUMBER, 
	"BOOK_ID" NUMBER DEFAULT -1, 
	"STOCK" NUMBER DEFAULT 0
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table BOOK_AUTHORS
--------------------------------------------------------

  CREATE TABLE "IT011873"."BOOK_AUTHORS" 
   (	"BOOK_ID" NUMBER(*,0), 
	"AUTHOR_ID" NUMBER(*,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table BOOK_LENDING
--------------------------------------------------------

  CREATE TABLE "IT011873"."BOOK_LENDING" 
   (	"ID" NUMBER(*,0), 
	"USER_ID" NUMBER(*,0), 
	"BOOK_ID" NUMBER(*,0), 
	"LENDING_DATE" DATE, 
	"RETURN_DATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table LEND_CATEGORIES
--------------------------------------------------------

  CREATE TABLE "IT011873"."LEND_CATEGORIES" 
   (	"ID" NUMBER(*,0), 
	"DESCRIPTION" VARCHAR2(15 BYTE), 
	"LEND_CODE" NUMBER(*,0), 
	"PRICE" NUMBER(*,0), 
	"OVERDUE_PRICE" NUMBER(*,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;

   COMMENT ON COLUMN "IT011873"."LEND_CATEGORIES"."LEND_CODE" IS '1=3 DAYS RETURN
2=5 DAYS RETURN
3=7 DAYS RETURN
4=MONTHLY RETURN';
   COMMENT ON COLUMN "IT011873"."LEND_CATEGORIES"."OVERDUE_PRICE" IS 'OVERDUE PRICE PER DAY';
--------------------------------------------------------
--  DDL for Table LOG
--------------------------------------------------------

  CREATE TABLE "IT011873"."LOG" 
   (	"ID" NUMBER, 
	"LOG_ENTRY" VARCHAR2(100 BYTE), 
	"DATE_ENTRY" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table PUBLISHING_HOUSES
--------------------------------------------------------

  CREATE TABLE "IT011873"."PUBLISHING_HOUSES" 
   (	"ID" NUMBER(*,0), 
	"NAME" VARCHAR2(50 BYTE), 
	"FOUNDATION_DATE" DATE
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Table ROLES
--------------------------------------------------------

  CREATE TABLE "IT011873"."ROLES" 
   (	"ID" NUMBER(*,0), 
	"ROLE_DESC" VARCHAR2(20 BYTE), 
	"ROLE_VAL" NUMBER(*,0)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;

   COMMENT ON COLUMN "IT011873"."ROLES"."ROLE_VAL" IS '1=ADMIN, 2=USER, 3=CLIENT';
--------------------------------------------------------
--  DDL for Table USERS
--------------------------------------------------------

  CREATE TABLE "IT011873"."USERS" 
   (	"ID" NUMBER(*,0), 
	"NAME" VARCHAR2(30 BYTE), 
	"SURNAME" VARCHAR2(30 BYTE), 
	"ROLE" NUMBER(*,0), 
	"USERNAME" VARCHAR2(20 BYTE), 
	"PASSWORD" VARCHAR2(64 BYTE), 
	"REG_DAY" DATE, 
	"MAIL_ADDRESS" VARCHAR2(50 BYTE), 
	"ACTIVE" NUMBER, 
	"NOTES" VARCHAR2(250 BYTE)
   ) SEGMENT CREATION IMMEDIATE 
  PCTFREE 10 PCTUSED 40 INITRANS 1 MAXTRANS 255 
 NOCOMPRESS LOGGING
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;

   COMMENT ON COLUMN "IT011873"."USERS"."USERNAME" IS 'User''s email address';
   COMMENT ON COLUMN "IT011873"."USERS"."PASSWORD" IS 'Use 123 for password, I use SHA256';
   COMMENT ON COLUMN "IT011873"."USERS"."ACTIVE" IS '0=DISABLED, 1=ENABLED';
REM INSERTING into IT011873.AUTHORS
SET DEFINE OFF;
Insert into IT011873.AUTHORS (ID,NAME,SURNAME,COUNTRY,BIO) values (1,'William','Shakespeare','England',null);
Insert into IT011873.AUTHORS (ID,NAME,SURNAME,COUNTRY,BIO) values (2,'Harold','Robbins','USA',null);
Insert into IT011873.AUTHORS (ID,NAME,SURNAME,COUNTRY,BIO) values (3,'Elichiro','Oda','Japan',null);
Insert into IT011873.AUTHORS (ID,NAME,SURNAME,COUNTRY,BIO) values (4,'Leo','Tolstoy','Russia',null);
Insert into IT011873.AUTHORS (ID,NAME,SURNAME,COUNTRY,BIO) values (5,'Corin','Tellado','Spain',null);
Insert into IT011873.AUTHORS (ID,NAME,SURNAME,COUNTRY,BIO) values (6,'Rene','Goscinny','France',null);
Insert into IT011873.AUTHORS (ID,NAME,SURNAME,COUNTRY,BIO) values (7,'Agatha','Christie','England',null);
Insert into IT011873.AUTHORS (ID,NAME,SURNAME,COUNTRY,BIO) values (9,'Author1','Surname author 1','Greece','Dokimastikos gia log');
Insert into IT011873.AUTHORS (ID,NAME,SURNAME,COUNTRY,BIO) values (10,'Shawn','Kemp','USA','Was a basketball player');
Insert into IT011873.AUTHORS (ID,NAME,SURNAME,COUNTRY,BIO) values (13,'Ευκλείδης','Κεραμόπουλος','Ελλάδα','Είναι και καθηγητής');
Insert into IT011873.AUTHORS (ID,NAME,SURNAME,COUNTRY,BIO) values (11,'Νέος','Author','Greece','Ένας νέος συγγραφέας');
Insert into IT011873.AUTHORS (ID,NAME,SURNAME,COUNTRY,BIO) values (8,'Giannis','Gavras','Greece','Started as a singer but then turned into an author');
Insert into IT011873.AUTHORS (ID,NAME,SURNAME,COUNTRY,BIO) values (12,'Νέος','Συγγραφέας','Ελλάδα','Γεννήθηκε στην Αθήνα');
REM INSERTING into IT011873.BOOKS
SET DEFINE OFF;
Insert into IT011873.BOOKS (ID,TITLE,CATEGORY,PUBLISH_DATE,PUBLISHING_HOUSE,LEND_CATEGORY,ISBN) values (21,'Νέο βιβλίο 2',2,to_date('10-MAY-00','DD-MON-RR'),3,2,'1231245435');
Insert into IT011873.BOOKS (ID,TITLE,CATEGORY,PUBLISH_DATE,PUBLISHING_HOUSE,LEND_CATEGORY,ISBN) values (17,'A title of a book',2,to_date('25-NOV-23','DD-MON-RR'),1,2,'1231234234');
Insert into IT011873.BOOKS (ID,TITLE,CATEGORY,PUBLISH_DATE,PUBLISHING_HOUSE,LEND_CATEGORY,ISBN) values (9,'DOKIMASTIKOS TITLOS',1,to_date('13-NOV-23','DD-MON-RR'),1,1,'1234567890000');
Insert into IT011873.BOOKS (ID,TITLE,CATEGORY,PUBLISH_DATE,PUBLISHING_HOUSE,LEND_CATEGORY,ISBN) values (11,'titlos 2',1,to_date('13-NOV-23','DD-MON-RR'),2,1,'1111111111111');
Insert into IT011873.BOOKS (ID,TITLE,CATEGORY,PUBLISH_DATE,PUBLISHING_HOUSE,LEND_CATEGORY,ISBN) values (10,'titlos 1',1,to_date('13-NOV-23','DD-MON-RR'),2,1,'2222222222222');
Insert into IT011873.BOOKS (ID,TITLE,CATEGORY,PUBLISH_DATE,PUBLISHING_HOUSE,LEND_CATEGORY,ISBN) values (20,'Τελευταία Δοκιμή',6,to_date('18-DEC-50','DD-MON-RR'),3,2,'54986118');
Insert into IT011873.BOOKS (ID,TITLE,CATEGORY,PUBLISH_DATE,PUBLISHING_HOUSE,LEND_CATEGORY,ISBN) values (18,'The final Testing',2,to_date('04-DEC-23','DD-MON-RR'),3,1,'1234567890999');
Insert into IT011873.BOOKS (ID,TITLE,CATEGORY,PUBLISH_DATE,PUBLISHING_HOUSE,LEND_CATEGORY,ISBN) values (15,'Πρώτη Δοκιμή',5,to_date('20-NOV-23','DD-MON-RR'),5,1,'1234567890123');
Insert into IT011873.BOOKS (ID,TITLE,CATEGORY,PUBLISH_DATE,PUBLISHING_HOUSE,LEND_CATEGORY,ISBN) values (12,'titlos 999',1,to_date('13-NOV-23','DD-MON-RR'),2,1,'5555555555555');
Insert into IT011873.BOOKS (ID,TITLE,CATEGORY,PUBLISH_DATE,PUBLISHING_HOUSE,LEND_CATEGORY,ISBN) values (16,'Η 15η δοκιμή',6,to_date('20-NOV-23','DD-MON-RR'),5,1,'1234567890999');
REM INSERTING into IT011873.BOOKS_CATEGORIES
SET DEFINE OFF;
Insert into IT011873.BOOKS_CATEGORIES (ID,CAT_DESC,SUB_CATEGORY) values (1,'Science Fiction',null);
Insert into IT011873.BOOKS_CATEGORIES (ID,CAT_DESC,SUB_CATEGORY) values (2,'Comedy',null);
Insert into IT011873.BOOKS_CATEGORIES (ID,CAT_DESC,SUB_CATEGORY) values (3,'Romance',null);
Insert into IT011873.BOOKS_CATEGORIES (ID,CAT_DESC,SUB_CATEGORY) values (4,'Romantic Comedy',2);
Insert into IT011873.BOOKS_CATEGORIES (ID,CAT_DESC,SUB_CATEGORY) values (5,'Adventure',null);
Insert into IT011873.BOOKS_CATEGORIES (ID,CAT_DESC,SUB_CATEGORY) values (6,'Drama',null);
Insert into IT011873.BOOKS_CATEGORIES (ID,CAT_DESC,SUB_CATEGORY) values (7,'Action',null);
Insert into IT011873.BOOKS_CATEGORIES (ID,CAT_DESC,SUB_CATEGORY) values (8,'Documentary',null);
REM INSERTING into IT011873.BOOKS_STOCK
SET DEFINE OFF;
Insert into IT011873.BOOKS_STOCK (ID,BOOK_ID,STOCK) values (5,9,0);
Insert into IT011873.BOOKS_STOCK (ID,BOOK_ID,STOCK) values (6,10,1);
Insert into IT011873.BOOKS_STOCK (ID,BOOK_ID,STOCK) values (7,11,8);
Insert into IT011873.BOOKS_STOCK (ID,BOOK_ID,STOCK) values (8,12,3);
Insert into IT011873.BOOKS_STOCK (ID,BOOK_ID,STOCK) values (11,17,22);
Insert into IT011873.BOOKS_STOCK (ID,BOOK_ID,STOCK) values (15,21,6);
Insert into IT011873.BOOKS_STOCK (ID,BOOK_ID,STOCK) values (14,20,2);
Insert into IT011873.BOOKS_STOCK (ID,BOOK_ID,STOCK) values (12,18,13);
Insert into IT011873.BOOKS_STOCK (ID,BOOK_ID,STOCK) values (9,15,10);
Insert into IT011873.BOOKS_STOCK (ID,BOOK_ID,STOCK) values (10,16,14);
REM INSERTING into IT011873.BOOK_AUTHORS
SET DEFINE OFF;
Insert into IT011873.BOOK_AUTHORS (BOOK_ID,AUTHOR_ID) values (9,1);
Insert into IT011873.BOOK_AUTHORS (BOOK_ID,AUTHOR_ID) values (9,2);
Insert into IT011873.BOOK_AUTHORS (BOOK_ID,AUTHOR_ID) values (9,4);
Insert into IT011873.BOOK_AUTHORS (BOOK_ID,AUTHOR_ID) values (10,1);
Insert into IT011873.BOOK_AUTHORS (BOOK_ID,AUTHOR_ID) values (10,3);
Insert into IT011873.BOOK_AUTHORS (BOOK_ID,AUTHOR_ID) values (10,7);
Insert into IT011873.BOOK_AUTHORS (BOOK_ID,AUTHOR_ID) values (11,1);
Insert into IT011873.BOOK_AUTHORS (BOOK_ID,AUTHOR_ID) values (11,3);
Insert into IT011873.BOOK_AUTHORS (BOOK_ID,AUTHOR_ID) values (11,7);
Insert into IT011873.BOOK_AUTHORS (BOOK_ID,AUTHOR_ID) values (12,1);
Insert into IT011873.BOOK_AUTHORS (BOOK_ID,AUTHOR_ID) values (12,7);
Insert into IT011873.BOOK_AUTHORS (BOOK_ID,AUTHOR_ID) values (15,1);
Insert into IT011873.BOOK_AUTHORS (BOOK_ID,AUTHOR_ID) values (15,3);
Insert into IT011873.BOOK_AUTHORS (BOOK_ID,AUTHOR_ID) values (16,2);
Insert into IT011873.BOOK_AUTHORS (BOOK_ID,AUTHOR_ID) values (16,7);
Insert into IT011873.BOOK_AUTHORS (BOOK_ID,AUTHOR_ID) values (17,1);
Insert into IT011873.BOOK_AUTHORS (BOOK_ID,AUTHOR_ID) values (17,5);
Insert into IT011873.BOOK_AUTHORS (BOOK_ID,AUTHOR_ID) values (18,2);
Insert into IT011873.BOOK_AUTHORS (BOOK_ID,AUTHOR_ID) values (18,4);
Insert into IT011873.BOOK_AUTHORS (BOOK_ID,AUTHOR_ID) values (18,7);
Insert into IT011873.BOOK_AUTHORS (BOOK_ID,AUTHOR_ID) values (20,1);
Insert into IT011873.BOOK_AUTHORS (BOOK_ID,AUTHOR_ID) values (20,2);
Insert into IT011873.BOOK_AUTHORS (BOOK_ID,AUTHOR_ID) values (20,3);
Insert into IT011873.BOOK_AUTHORS (BOOK_ID,AUTHOR_ID) values (21,1);
Insert into IT011873.BOOK_AUTHORS (BOOK_ID,AUTHOR_ID) values (21,3);
Insert into IT011873.BOOK_AUTHORS (BOOK_ID,AUTHOR_ID) values (21,4);
REM INSERTING into IT011873.BOOK_LENDING
SET DEFINE OFF;
Insert into IT011873.BOOK_LENDING (ID,USER_ID,BOOK_ID,LENDING_DATE,RETURN_DATE) values (25,16,17,to_date('12-DEC-23','DD-MON-RR'),null);
Insert into IT011873.BOOK_LENDING (ID,USER_ID,BOOK_ID,LENDING_DATE,RETURN_DATE) values (23,12,16,to_date('11-DEC-23','DD-MON-RR'),to_date('18-DEC-23','DD-MON-RR'));
Insert into IT011873.BOOK_LENDING (ID,USER_ID,BOOK_ID,LENDING_DATE,RETURN_DATE) values (2,3,11,to_date('13-NOV-23','DD-MON-RR'),to_date('26-NOV-23','DD-MON-RR'));
Insert into IT011873.BOOK_LENDING (ID,USER_ID,BOOK_ID,LENDING_DATE,RETURN_DATE) values (26,16,20,to_date('01-DEC-23','DD-MON-RR'),null);
Insert into IT011873.BOOK_LENDING (ID,USER_ID,BOOK_ID,LENDING_DATE,RETURN_DATE) values (19,12,10,to_date('05-DEC-23','DD-MON-RR'),to_date('05-DEC-23','DD-MON-RR'));
Insert into IT011873.BOOK_LENDING (ID,USER_ID,BOOK_ID,LENDING_DATE,RETURN_DATE) values (16,3,17,to_date('26-NOV-23','DD-MON-RR'),to_date('26-NOV-23','DD-MON-RR'));
Insert into IT011873.BOOK_LENDING (ID,USER_ID,BOOK_ID,LENDING_DATE,RETURN_DATE) values (20,12,12,to_date('08-DEC-23','DD-MON-RR'),null);
Insert into IT011873.BOOK_LENDING (ID,USER_ID,BOOK_ID,LENDING_DATE,RETURN_DATE) values (24,16,20,to_date('13-DEC-23','DD-MON-RR'),null);
Insert into IT011873.BOOK_LENDING (ID,USER_ID,BOOK_ID,LENDING_DATE,RETURN_DATE) values (15,3,11,to_date('26-NOV-23','DD-MON-RR'),null);
Insert into IT011873.BOOK_LENDING (ID,USER_ID,BOOK_ID,LENDING_DATE,RETURN_DATE) values (21,14,12,to_date('01-DEC-23','DD-MON-RR'),null);
Insert into IT011873.BOOK_LENDING (ID,USER_ID,BOOK_ID,LENDING_DATE,RETURN_DATE) values (13,3,16,to_date('26-NOV-23','DD-MON-RR'),null);
Insert into IT011873.BOOK_LENDING (ID,USER_ID,BOOK_ID,LENDING_DATE,RETURN_DATE) values (17,3,9,to_date('28-NOV-23','DD-MON-RR'),null);
REM INSERTING into IT011873.LEND_CATEGORIES
SET DEFINE OFF;
Insert into IT011873.LEND_CATEGORIES (ID,DESCRIPTION,LEND_CODE,PRICE,OVERDUE_PRICE) values (1,'Short term',1,2,1);
Insert into IT011873.LEND_CATEGORIES (ID,DESCRIPTION,LEND_CODE,PRICE,OVERDUE_PRICE) values (2,'Mid term',2,3,1);
Insert into IT011873.LEND_CATEGORIES (ID,DESCRIPTION,LEND_CODE,PRICE,OVERDUE_PRICE) values (3,'Long term',3,4,1);
Insert into IT011873.LEND_CATEGORIES (ID,DESCRIPTION,LEND_CODE,PRICE,OVERDUE_PRICE) values (4,'Monthly',4,5,1);
REM INSERTING into IT011873.LOG
SET DEFINE OFF;
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (4,'TABLE AUTHORS: A DML OCCURRED',to_date('25-NOV-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (5,'TABLE BOOKS: A DML OCCURRED',to_date('25-NOV-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (6,'TABLE BOOK_AUTHORS: A DML OCCURRED',to_date('25-NOV-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (7,'TABLE BOOK_AUTHORS: A DML OCCURRED',to_date('25-NOV-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (8,'TABLE BOOKS_STOCK: A DML OCCURRED',to_date('25-NOV-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (36,'TABLE BOOK_LENDING: A DML OCCURRED',to_date('26-NOV-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (37,'TABLE BOOKS_STOCK: A DML OCCURRED',to_date('26-NOV-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (40,'TABLE USERS: A DML OCCURRED',to_date('28-NOV-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (42,'User 11 Miltos Parcharidis has logged in',to_date('28-NOV-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (47,'User 3 Miltiadis Parcharidis has logged in',to_date('04-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (50,'TABLE AUTHORS: A DML OCCURRED',to_date('04-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (66,'TABLE USERS: A DML OCCURRED',to_date('04-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (67,'TABLE USERS: A DML OCCURRED',to_date('04-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (74,'TABLE BOOK_LENDING: A DML OCCURRED',to_date('04-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (75,'TABLE BOOKS_STOCK: A DML OCCURRED',to_date('04-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (81,'TABLE BOOK_LENDING: A DML OCCURRED',to_date('05-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (82,'TABLE BOOKS_STOCK: A DML OCCURRED',to_date('05-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (87,'User 0 null null closed the application',to_date('08-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (90,'User 0 null null has logged off',to_date('08-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (97,'User 3 Miltiadis Parcharidis has logged in',to_date('11-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (100,'TABLE BOOK_LENDING: A DML OCCURRED',to_date('11-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (110,'TABLE BOOK_LENDING: A DML OCCURRED',to_date('11-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (117,'TABLE BOOKS: A DML OCCURRED',to_date('11-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (118,'TABLE BOOK_AUTHORS: A DML OCCURRED',to_date('11-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (119,'TABLE BOOK_AUTHORS: A DML OCCURRED',to_date('11-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (120,'TABLE BOOK_AUTHORS: A DML OCCURRED',to_date('11-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (121,'TABLE BOOKS_STOCK: A DML OCCURRED',to_date('11-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (130,'TABLE BOOKS: A DML OCCURRED',to_date('11-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (131,'TABLE BOOK_AUTHORS: A DML OCCURRED',to_date('11-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (132,'TABLE BOOKS_STOCK: A DML OCCURRED',to_date('11-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (134,'User 0 null null closed the application',to_date('11-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (147,'TABLE BOOK_LENDING: A DML OCCURRED',to_date('13-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (148,'TABLE BOOKS_STOCK: A DML OCCURRED',to_date('13-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (151,'TABLE BOOK_LENDING: A DML OCCURRED',to_date('13-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (152,'TABLE BOOK_LENDING: A DML OCCURRED',to_date('13-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (153,'User 3 Miltiadis Parcharidis has logged in',to_date('18-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (160,'TABLE USERS: A DML OCCURRED',to_date('18-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (161,'TABLE BOOK_LENDING: A DML OCCURRED',to_date('18-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (162,'TABLE AUTHORS: A DML OCCURRED',to_date('18-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (163,'TABLE BOOKS: A DML OCCURRED',to_date('18-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (164,'TABLE BOOK_AUTHORS: A DML OCCURRED',to_date('18-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (165,'TABLE BOOK_AUTHORS: A DML OCCURRED',to_date('18-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (166,'TABLE BOOK_AUTHORS: A DML OCCURRED',to_date('18-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (167,'TABLE BOOKS_STOCK: A DML OCCURRED',to_date('18-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (1,'TABLE AUTHORS: A DML OCCURRED',to_date('24-NOV-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (20,'TABLE BOOK_LENDING: A DML OCCURRED',to_date('26-NOV-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (21,'TABLE BOOKS_STOCK: A DML OCCURRED',to_date('26-NOV-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (48,'User 3 Miltiadis Parcharidis has logged off',to_date('04-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (56,'TABLE BOOK_LENDING: A DML OCCURRED',to_date('04-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (57,'TABLE BOOKS_STOCK: A DML OCCURRED',to_date('04-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (58,'TABLE BOOK_LENDING: A DML OCCURRED',to_date('04-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (64,'User 3 Miltiadis Parcharidis has logged in',to_date('04-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (65,'TABLE USERS: A DML OCCURRED',to_date('04-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (68,'TABLE USERS: A DML OCCURRED',to_date('04-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (70,'TABLE USERS: A DML OCCURRED',to_date('04-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (71,'TABLE BOOK_LENDING: A DML OCCURRED',to_date('04-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (76,'TABLE USERS: A DML OCCURRED',to_date('04-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (77,'TABLE BOOK_LENDING: A DML OCCURRED',to_date('04-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (84,'User 0 null null closed the application',to_date('05-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (92,'TABLE USERS: A DML OCCURRED',to_date('09-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (95,'User 14 Πέτρος Αναστασιάδης has logged in',to_date('09-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (96,'User 3 Miltiadis Parcharidis has logged in',to_date('09-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (101,'User 3 Miltiadis Parcharidis has logged off',to_date('11-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (102,'User 3 Miltiadis Parcharidis has logged in',to_date('11-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (107,'TABLE AUTHORS: A DML OCCURRED',to_date('11-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (108,'TABLE BOOK_LENDING: A DML OCCURRED',to_date('11-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (109,'TABLE BOOKS_STOCK: A DML OCCURRED',to_date('11-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (111,'TABLE BOOK_LENDING: A DML OCCURRED',to_date('11-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (112,'TABLE BOOKS_STOCK: A DML OCCURRED',to_date('11-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (113,'TABLE BOOK_LENDING: A DML OCCURRED',to_date('11-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (114,'TABLE BOOKS_STOCK: A DML OCCURRED',to_date('11-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (115,'TABLE USERS: A DML OCCURRED',to_date('11-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (116,'TABLE BOOK_LENDING: A DML OCCURRED',to_date('11-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (135,'User 3 Miltiadis Parcharidis has logged in',to_date('13-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (140,'TABLE BOOKS: A DML OCCURRED',to_date('13-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (141,'TABLE BOOK_AUTHORS: A DML OCCURRED',to_date('13-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (142,'TABLE BOOK_AUTHORS: A DML OCCURRED',to_date('13-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (143,'TABLE BOOK_AUTHORS: A DML OCCURRED',to_date('13-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (144,'TABLE BOOKS_STOCK: A DML OCCURRED',to_date('13-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (149,'TABLE BOOK_LENDING: A DML OCCURRED',to_date('13-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (150,'TABLE BOOKS_STOCK: A DML OCCURRED',to_date('13-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (154,'User 3 Miltiadis Parcharidis closed the application',to_date('18-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (12,'TABLE BOOK_LENDING: A DML OCCURRED',to_date('26-NOV-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (13,'TABLE BOOKS_STOCK: A DML OCCURRED',to_date('26-NOV-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (16,'TABLE BOOK_LENDING: A DML OCCURRED',to_date('26-NOV-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (17,'TABLE BOOK_LENDING: A DML OCCURRED',to_date('26-NOV-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (18,'TABLE BOOK_LENDING: A DML OCCURRED',to_date('26-NOV-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (19,'TABLE BOOK_LENDING: A DML OCCURRED',to_date('26-NOV-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (22,'TABLE BOOK_LENDING: A DML OCCURRED',to_date('26-NOV-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (23,'TABLE BOOKS_STOCK: A DML OCCURRED',to_date('26-NOV-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (24,'TABLE BOOK_LENDING: A DML OCCURRED',to_date('26-NOV-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (25,'TABLE BOOKS_STOCK: A DML OCCURRED',to_date('26-NOV-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (26,'TABLE BOOK_LENDING: A DML OCCURRED',to_date('26-NOV-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (27,'TABLE BOOK_LENDING: A DML OCCURRED',to_date('26-NOV-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (28,'TABLE BOOKS_STOCK: A DML OCCURRED',to_date('26-NOV-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (34,'TABLE BOOK_LENDING: A DML OCCURRED',to_date('26-NOV-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (35,'TABLE BOOKS_STOCK: A DML OCCURRED',to_date('26-NOV-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (43,'User 11 Miltos Parcharidis has logged off',to_date('28-NOV-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (51,'TABLE BOOKS: A DML OCCURRED',to_date('04-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (52,'TABLE BOOK_AUTHORS: A DML OCCURRED',to_date('04-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (53,'TABLE BOOK_AUTHORS: A DML OCCURRED',to_date('04-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (54,'TABLE BOOK_AUTHORS: A DML OCCURRED',to_date('04-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (55,'TABLE BOOKS_STOCK: A DML OCCURRED',to_date('04-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (62,'TABLE USERS: A DML OCCURRED',to_date('04-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (79,'TABLE BOOK_LENDING: A DML OCCURRED',to_date('05-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (80,'TABLE BOOKS_STOCK: A DML OCCURRED',to_date('05-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (85,'User 3 Miltiadis Parcharidis has logged in',to_date('08-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (86,'User 3 Miltiadis Parcharidis has logged off',to_date('08-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (88,'TABLE BOOK_LENDING: A DML OCCURRED',to_date('08-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (89,'TABLE BOOKS_STOCK: A DML OCCURRED',to_date('08-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (103,'User 3 Miltiadis Parcharidis has logged off',to_date('11-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (156,'TABLE USERS: A DML OCCURRED',to_date('18-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (170,'User 3 Miltiadis Parcharidis closed the application',to_date('18-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (3,'TABLE USERS: A DML OCCURRED',to_date('25-NOV-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (9,'TABLE BOOK_LENDING: A DML OCCURRED',to_date('25-NOV-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (10,'TABLE BOOKS_STOCK: A DML OCCURRED',to_date('25-NOV-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (32,'TABLE BOOK_LENDING: A DML OCCURRED',to_date('26-NOV-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (33,'TABLE BOOKS_STOCK: A DML OCCURRED',to_date('26-NOV-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (38,'TABLE USERS: A DML OCCURRED',to_date('28-NOV-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (39,'TABLE USERS: A DML OCCURRED',to_date('28-NOV-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (63,'TABLE USERS: A DML OCCURRED',to_date('04-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (73,'TABLE BOOKS_STOCK: A DML OCCURRED',to_date('04-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (78,'User 3 Miltiadis Parcharidis has logged in',to_date('05-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (83,'User 3 Miltiadis Parcharidis has logged in',to_date('05-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (91,'User 3 Miltiadis Parcharidis has logged in',to_date('09-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (93,'TABLE USERS: A DML OCCURRED',to_date('09-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (98,'TABLE BOOK_LENDING: A DML OCCURRED',to_date('11-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (99,'TABLE BOOKS_STOCK: A DML OCCURRED',to_date('11-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (106,'TABLE USERS: A DML OCCURRED',to_date('11-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (133,'User 0 null null closed the application',to_date('11-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (138,'TABLE USERS: A DML OCCURRED',to_date('13-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (145,'TABLE BOOK_LENDING: A DML OCCURRED',to_date('13-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (146,'TABLE BOOKS_STOCK: A DML OCCURRED',to_date('13-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (155,'User 3 Miltiadis Parcharidis has logged in',to_date('18-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (157,'TABLE USERS: A DML OCCURRED',to_date('18-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (29,'TABLE BOOK_LENDING: A DML OCCURRED',to_date('26-NOV-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (30,'TABLE BOOKS_STOCK: A DML OCCURRED',to_date('26-NOV-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (41,'TABLE USERS: A DML OCCURRED',to_date('28-NOV-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (44,'User 3 Miltiadis Parcharidis has logged in',to_date('28-NOV-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (45,'TABLE BOOK_LENDING: A DML OCCURRED',to_date('28-NOV-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (46,'TABLE BOOKS_STOCK: A DML OCCURRED',to_date('28-NOV-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (49,'User 3 Miltiadis Parcharidis has logged in',to_date('04-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (59,'TABLE BOOK_LENDING: A DML OCCURRED',to_date('04-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (60,'TABLE BOOKS_STOCK: A DML OCCURRED',to_date('04-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (72,'TABLE BOOKS_STOCK: A DML OCCURRED',to_date('04-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (94,'User 3 Miltiadis Parcharidis has logged off',to_date('09-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (104,'User 3 Miltiadis Parcharidis has logged in',to_date('11-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (136,'TABLE USERS: A DML OCCURRED',to_date('13-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (137,'TABLE USERS: A DML OCCURRED',to_date('13-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (139,'TABLE AUTHORS: A DML OCCURRED',to_date('13-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (158,'TABLE BOOK_LENDING: A DML OCCURRED',to_date('18-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (159,'TABLE BOOKS_STOCK: A DML OCCURRED',to_date('18-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (168,'TABLE BOOK_LENDING: A DML OCCURRED',to_date('18-DEC-23','DD-MON-RR'));
Insert into IT011873.LOG (ID,LOG_ENTRY,DATE_ENTRY) values (169,'TABLE BOOKS_STOCK: A DML OCCURRED',to_date('18-DEC-23','DD-MON-RR'));
REM INSERTING into IT011873.PUBLISHING_HOUSES
SET DEFINE OFF;
Insert into IT011873.PUBLISHING_HOUSES (ID,NAME,FOUNDATION_DATE) values (1,'Penguin Random House',to_date('10-NOV-23','DD-MON-RR'));
Insert into IT011873.PUBLISHING_HOUSES (ID,NAME,FOUNDATION_DATE) values (2,'Simon and Schuster',to_date('28-AUG-24','DD-MON-RR'));
Insert into IT011873.PUBLISHING_HOUSES (ID,NAME,FOUNDATION_DATE) values (3,'McMillan Publishers',to_date('10-NOV-23','DD-MON-RR'));
Insert into IT011873.PUBLISHING_HOUSES (ID,NAME,FOUNDATION_DATE) values (4,'Harper Collins',to_date('02-MAY-89','DD-MON-RR'));
Insert into IT011873.PUBLISHING_HOUSES (ID,NAME,FOUNDATION_DATE) values (5,'John Wiley and Son',to_date('11-NOV-07','DD-MON-RR'));
REM INSERTING into IT011873.ROLES
SET DEFINE OFF;
Insert into IT011873.ROLES (ID,ROLE_DESC,ROLE_VAL) values (1,'Admin',1);
Insert into IT011873.ROLES (ID,ROLE_DESC,ROLE_VAL) values (2,'User',2);
Insert into IT011873.ROLES (ID,ROLE_DESC,ROLE_VAL) values (3,'Client',3);
REM INSERTING into IT011873.USERS
SET DEFINE OFF;
Insert into IT011873.USERS (ID,NAME,SURNAME,ROLE,USERNAME,PASSWORD,REG_DAY,MAIL_ADDRESS,ACTIVE,NOTES) values (13,'Κωνσταντίνος','Οικονόμου',3,'oikonomou@gmail.com','556d7dc3a115356350f1f9910b1af1ab0e312d4b3e4fc788d2da63668f36d017',to_date('09-DEC-23','DD-MON-RR'),'Καλαμαριά',1,'Του αρέσουν τα επιστημονικής φαντασίας');
Insert into IT011873.USERS (ID,NAME,SURNAME,ROLE,USERNAME,PASSWORD,REG_DAY,MAIL_ADDRESS,ACTIVE,NOTES) values (12,'Παρουσίαση','Δοκιμαστικός',3,'it011873','2ac9a6746aca543af8dff39894cfe8173afba21eb01c6fae33d52947222855ef',to_date('04-DEC-23','DD-MON-RR'),'Σίνδος, ΔΙΠΑΕ',1,'DBlabs assignment');
Insert into IT011873.USERS (ID,NAME,SURNAME,ROLE,USERNAME,PASSWORD,REG_DAY,MAIL_ADDRESS,ACTIVE,NOTES) values (3,'Miltos','Parcharidis',1,'parharidis@gmail.com','a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3',to_date('10-NOV-23','DD-MON-RR'),'Kalamaria',1,'Admin');
Insert into IT011873.USERS (ID,NAME,SURNAME,ROLE,USERNAME,PASSWORD,REG_DAY,MAIL_ADDRESS,ACTIVE,NOTES) values (14,'Πέτρος','Αναστασιάδης',3,'anasta@gmail.com','556d7dc3a115356350f1f9910b1af1ab0e312d4b3e4fc788d2da63668f36d017',to_date('09-DEC-23','DD-MON-RR'),'Θέρμη, Ιωαννίδη 12, 12345',1,'Δεν παρέλαβε κάρτα βιβλιοθήκης');
Insert into IT011873.USERS (ID,NAME,SURNAME,ROLE,USERNAME,PASSWORD,REG_DAY,MAIL_ADDRESS,ACTIVE,NOTES) values (16,'Τελική','Παρουσίαση',3,'username1','a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3',to_date('13-DEC-23','DD-MON-RR'),'Ταχ. Διεύθυνση',1,'Προτιμάει Φαντασίας');
--------------------------------------------------------
--  DDL for Index AUTHORS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "IT011873"."AUTHORS_PK" ON "IT011873"."AUTHORS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index BOOKS_CATEGORIES_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "IT011873"."BOOKS_CATEGORIES_PK" ON "IT011873"."BOOKS_CATEGORIES" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index BOOKS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "IT011873"."BOOKS_PK" ON "IT011873"."BOOKS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index BOOKS_STOCK_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "IT011873"."BOOKS_STOCK_PK" ON "IT011873"."BOOKS_STOCK" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index BOOK_AUTHORS_UK1
--------------------------------------------------------

  CREATE UNIQUE INDEX "IT011873"."BOOK_AUTHORS_UK1" ON "IT011873"."BOOK_AUTHORS" ("BOOK_ID", "AUTHOR_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index BOOK_LENDING_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "IT011873"."BOOK_LENDING_PK" ON "IT011873"."BOOK_LENDING" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index LEND_CATEGORIES_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "IT011873"."LEND_CATEGORIES_PK" ON "IT011873"."LEND_CATEGORIES" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index LOG_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "IT011873"."LOG_PK" ON "IT011873"."LOG" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PUBLISH_HOUSES_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "IT011873"."PUBLISH_HOUSES_PK" ON "IT011873"."PUBLISHING_HOUSES" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index ROLES_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "IT011873"."ROLES_PK" ON "IT011873"."ROLES" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index ROLES__UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "IT011873"."ROLES__UN" ON "IT011873"."ROLES" ("ROLE_DESC") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index ROLES__UNV1
--------------------------------------------------------

  CREATE UNIQUE INDEX "IT011873"."ROLES__UNV1" ON "IT011873"."ROLES" ("ROLE_VAL") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index USERS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "IT011873"."USERS_PK" ON "IT011873"."USERS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index USERS__UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "IT011873"."USERS__UN" ON "IT011873"."USERS" ("USERNAME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index AUTHORS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "IT011873"."AUTHORS_PK" ON "IT011873"."AUTHORS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index BOOKS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "IT011873"."BOOKS_PK" ON "IT011873"."BOOKS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index BOOKS_CATEGORIES_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "IT011873"."BOOKS_CATEGORIES_PK" ON "IT011873"."BOOKS_CATEGORIES" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index BOOKS_STOCK_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "IT011873"."BOOKS_STOCK_PK" ON "IT011873"."BOOKS_STOCK" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index BOOK_AUTHORS_UK1
--------------------------------------------------------

  CREATE UNIQUE INDEX "IT011873"."BOOK_AUTHORS_UK1" ON "IT011873"."BOOK_AUTHORS" ("BOOK_ID", "AUTHOR_ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index BOOK_LENDING_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "IT011873"."BOOK_LENDING_PK" ON "IT011873"."BOOK_LENDING" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index LEND_CATEGORIES_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "IT011873"."LEND_CATEGORIES_PK" ON "IT011873"."LEND_CATEGORIES" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index LOG_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "IT011873"."LOG_PK" ON "IT011873"."LOG" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index PUBLISH_HOUSES_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "IT011873"."PUBLISH_HOUSES_PK" ON "IT011873"."PUBLISHING_HOUSES" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index ROLES_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "IT011873"."ROLES_PK" ON "IT011873"."ROLES" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index ROLES__UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "IT011873"."ROLES__UN" ON "IT011873"."ROLES" ("ROLE_DESC") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index ROLES__UNV1
--------------------------------------------------------

  CREATE UNIQUE INDEX "IT011873"."ROLES__UNV1" ON "IT011873"."ROLES" ("ROLE_VAL") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index USERS_PK
--------------------------------------------------------

  CREATE UNIQUE INDEX "IT011873"."USERS_PK" ON "IT011873"."USERS" ("ID") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Index USERS__UN
--------------------------------------------------------

  CREATE UNIQUE INDEX "IT011873"."USERS__UN" ON "IT011873"."USERS" ("USERNAME") 
  PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS" ;
--------------------------------------------------------
--  DDL for Trigger AUTHORS_DML_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "IT011873"."AUTHORS_DML_TRG" 
BEFORE DELETE OR INSERT OR UPDATE ON AUTHORS 
BEGIN
  INSERT INTO LOG (LOG_ENTRY, date_entry) VALUES ('TABLE AUTHORS: A DML OCCURRED', (SELECT SYSDATE FROM DUAL));
END;
/
ALTER TRIGGER "IT011873"."AUTHORS_DML_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger AUTHORS_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "IT011873"."AUTHORS_ID_TRG" BEFORE
    INSERT ON authors
    FOR EACH ROW
     WHEN ( new.id IS NULL ) BEGIN
    :new.id := authors_id_seq.nextval;
END;

/
ALTER TRIGGER "IT011873"."AUTHORS_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger BOOKS_CATEGORIES_DML_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "IT011873"."BOOKS_CATEGORIES_DML_TRG" 
BEFORE DELETE OR INSERT OR UPDATE ON BOOKS_CATEGORIES 
BEGIN
  INSERT INTO LOG (LOG_ENTRY, date_entry) VALUES ('TABLE BOOKS_CATEGORIES: A DML OCCURRED', (SELECT SYSDATE FROM DUAL));
END;
/
ALTER TRIGGER "IT011873"."BOOKS_CATEGORIES_DML_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger BOOKS_CATEGORIES_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "IT011873"."BOOKS_CATEGORIES_ID_TRG" BEFORE
    INSERT ON books_categories
    FOR EACH ROW
     WHEN ( new.id IS NULL ) BEGIN
    :new.id := books_categories_id_seq.nextval;
END;

/
ALTER TRIGGER "IT011873"."BOOKS_CATEGORIES_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger BOOKS_DML_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "IT011873"."BOOKS_DML_TRG" 
BEFORE DELETE OR INSERT OR UPDATE ON BOOKS 
BEGIN
  INSERT INTO LOG (LOG_ENTRY, date_entry) VALUES ('TABLE BOOKS: A DML OCCURRED', (SELECT SYSDATE FROM DUAL));
END;
/
ALTER TRIGGER "IT011873"."BOOKS_DML_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger BOOKS_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "IT011873"."BOOKS_ID_TRG" BEFORE
    INSERT ON books
    FOR EACH ROW
     WHEN ( new.id IS NULL ) BEGIN
    :new.id := books_id_seq.nextval;
END;

/
ALTER TRIGGER "IT011873"."BOOKS_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger BOOKS_STOCK_DML_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "IT011873"."BOOKS_STOCK_DML_TRG" 
BEFORE DELETE OR INSERT OR UPDATE ON BOOKS_STOCK 
BEGIN
  INSERT INTO LOG (LOG_ENTRY, date_entry) VALUES ('TABLE BOOKS_STOCK: A DML OCCURRED', (SELECT SYSDATE FROM DUAL));
END;
/
ALTER TRIGGER "IT011873"."BOOKS_STOCK_DML_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger BOOKS_STOCK_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "IT011873"."BOOKS_STOCK_ID_TRG" BEFORE
    INSERT ON books_stock
    FOR EACH ROW
     WHEN ( new.id IS NULL ) BEGIN
    :new.id := lend_cat_id_seq.nextval;
END;
/
ALTER TRIGGER "IT011873"."BOOKS_STOCK_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger BOOK_AUTHORS_DML_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "IT011873"."BOOK_AUTHORS_DML_TRG" 
BEFORE DELETE OR INSERT OR UPDATE ON BOOK_AUTHORS 
BEGIN
  INSERT INTO LOG (LOG_ENTRY, date_entry) VALUES ('TABLE BOOK_AUTHORS: A DML OCCURRED', (SELECT SYSDATE FROM DUAL));
END;
/
ALTER TRIGGER "IT011873"."BOOK_AUTHORS_DML_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger BOOK_LENDING_DML_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "IT011873"."BOOK_LENDING_DML_TRG" 
BEFORE DELETE OR INSERT OR UPDATE ON BOOK_LENDING 
BEGIN
  INSERT INTO LOG (LOG_ENTRY, date_entry) VALUES ('TABLE BOOK_LENDING: A DML OCCURRED', (SELECT SYSDATE FROM DUAL));
END;
/
ALTER TRIGGER "IT011873"."BOOK_LENDING_DML_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger BOOK_LENDING_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "IT011873"."BOOK_LENDING_ID_TRG" BEFORE
    INSERT ON book_lending
    FOR EACH ROW
     WHEN ( new.id IS NULL ) BEGIN
    :new.id := book_lending_seq.nextval;
END;

/
ALTER TRIGGER "IT011873"."BOOK_LENDING_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger LEND_CATEGORIES_DML_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "IT011873"."LEND_CATEGORIES_DML_TRG" 
BEFORE DELETE OR INSERT OR UPDATE ON LEND_CATEGORIES 
BEGIN
  INSERT INTO LOG (LOG_ENTRY, date_entry) VALUES ('TABLE LEND_CATEGORIES: A DML OCCURRED', (SELECT SYSDATE FROM DUAL));
END;
/
ALTER TRIGGER "IT011873"."LEND_CATEGORIES_DML_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger LEND_CATEGORIES_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "IT011873"."LEND_CATEGORIES_ID_TRG" BEFORE
    INSERT ON lend_categories
    FOR EACH ROW
     WHEN ( new.id IS NULL ) BEGIN
    :new.id := lend_cat_id_seq.nextval;
END;

/
ALTER TRIGGER "IT011873"."LEND_CATEGORIES_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger LOG_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "IT011873"."LOG_ID_TRG" BEFORE
    INSERT ON log
    FOR EACH ROW
     WHEN ( new.id IS NULL ) BEGIN
    :new.id := log_id_seq.nextval;
END;
/
ALTER TRIGGER "IT011873"."LOG_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger PUBLISHING_HOUSES_DML_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "IT011873"."PUBLISHING_HOUSES_DML_TRG" 
BEFORE DELETE OR INSERT OR UPDATE ON PUBLISHING_HOUSES 
BEGIN
  INSERT INTO LOG (LOG_ENTRY, date_entry) VALUES ('TABLE PUBLISHING_HOUSES: A DML OCCURRED', (SELECT SYSDATE FROM DUAL));
END;
/
ALTER TRIGGER "IT011873"."PUBLISHING_HOUSES_DML_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger PUBLISHING_HOUSES_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "IT011873"."PUBLISHING_HOUSES_ID_TRG" BEFORE
    INSERT ON publishing_houses
    FOR EACH ROW
     WHEN ( new.id IS NULL ) BEGIN
    :new.id := pub_houses_id_seq.nextval;
END;

/
ALTER TRIGGER "IT011873"."PUBLISHING_HOUSES_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger ROLES_HOUSES_DML_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "IT011873"."ROLES_HOUSES_DML_TRG" 
BEFORE DELETE OR INSERT OR UPDATE ON ROLES 
BEGIN
  INSERT INTO LOG (LOG_ENTRY, date_entry) VALUES ('TABLE ROLES: A DML OCCURRED', (SELECT SYSDATE FROM DUAL));
END;
/
ALTER TRIGGER "IT011873"."ROLES_HOUSES_DML_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger ROLES_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "IT011873"."ROLES_ID_TRG" BEFORE
    INSERT ON roles
    FOR EACH ROW
     WHEN ( new.id IS NULL ) BEGIN
    :new.id := roles_id_seq.nextval;
END;

/
ALTER TRIGGER "IT011873"."ROLES_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger USERS_DML_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "IT011873"."USERS_DML_TRG" 
BEFORE DELETE OR INSERT OR UPDATE ON USERS 
BEGIN
  INSERT INTO LOG (LOG_ENTRY, date_entry) VALUES ('TABLE USERS: A DML OCCURRED', (SELECT SYSDATE FROM DUAL));
END;
/
ALTER TRIGGER "IT011873"."USERS_DML_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger USERS_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "IT011873"."USERS_ID_TRG" BEFORE
    INSERT ON users
    FOR EACH ROW
     WHEN ( new.id IS NULL ) BEGIN
    :new.id := users_id_seq.nextval;
END;

/
ALTER TRIGGER "IT011873"."USERS_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger AUTHORS_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "IT011873"."AUTHORS_ID_TRG" BEFORE
    INSERT ON authors
    FOR EACH ROW
     WHEN ( new.id IS NULL ) BEGIN
    :new.id := authors_id_seq.nextval;
END;

/
ALTER TRIGGER "IT011873"."AUTHORS_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger AUTHORS_DML_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "IT011873"."AUTHORS_DML_TRG" 
BEFORE DELETE OR INSERT OR UPDATE ON AUTHORS 
BEGIN
  INSERT INTO LOG (LOG_ENTRY, date_entry) VALUES ('TABLE AUTHORS: A DML OCCURRED', (SELECT SYSDATE FROM DUAL));
END;
/
ALTER TRIGGER "IT011873"."AUTHORS_DML_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger BOOKS_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "IT011873"."BOOKS_ID_TRG" BEFORE
    INSERT ON books
    FOR EACH ROW
     WHEN ( new.id IS NULL ) BEGIN
    :new.id := books_id_seq.nextval;
END;

/
ALTER TRIGGER "IT011873"."BOOKS_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger BOOKS_DML_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "IT011873"."BOOKS_DML_TRG" 
BEFORE DELETE OR INSERT OR UPDATE ON BOOKS 
BEGIN
  INSERT INTO LOG (LOG_ENTRY, date_entry) VALUES ('TABLE BOOKS: A DML OCCURRED', (SELECT SYSDATE FROM DUAL));
END;
/
ALTER TRIGGER "IT011873"."BOOKS_DML_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger BOOKS_CATEGORIES_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "IT011873"."BOOKS_CATEGORIES_ID_TRG" BEFORE
    INSERT ON books_categories
    FOR EACH ROW
     WHEN ( new.id IS NULL ) BEGIN
    :new.id := books_categories_id_seq.nextval;
END;

/
ALTER TRIGGER "IT011873"."BOOKS_CATEGORIES_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger BOOKS_CATEGORIES_DML_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "IT011873"."BOOKS_CATEGORIES_DML_TRG" 
BEFORE DELETE OR INSERT OR UPDATE ON BOOKS_CATEGORIES 
BEGIN
  INSERT INTO LOG (LOG_ENTRY, date_entry) VALUES ('TABLE BOOKS_CATEGORIES: A DML OCCURRED', (SELECT SYSDATE FROM DUAL));
END;
/
ALTER TRIGGER "IT011873"."BOOKS_CATEGORIES_DML_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger BOOKS_STOCK_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "IT011873"."BOOKS_STOCK_ID_TRG" BEFORE
    INSERT ON books_stock
    FOR EACH ROW
     WHEN ( new.id IS NULL ) BEGIN
    :new.id := lend_cat_id_seq.nextval;
END;
/
ALTER TRIGGER "IT011873"."BOOKS_STOCK_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger BOOKS_STOCK_DML_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "IT011873"."BOOKS_STOCK_DML_TRG" 
BEFORE DELETE OR INSERT OR UPDATE ON BOOKS_STOCK 
BEGIN
  INSERT INTO LOG (LOG_ENTRY, date_entry) VALUES ('TABLE BOOKS_STOCK: A DML OCCURRED', (SELECT SYSDATE FROM DUAL));
END;
/
ALTER TRIGGER "IT011873"."BOOKS_STOCK_DML_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger BOOK_AUTHORS_DML_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "IT011873"."BOOK_AUTHORS_DML_TRG" 
BEFORE DELETE OR INSERT OR UPDATE ON BOOK_AUTHORS 
BEGIN
  INSERT INTO LOG (LOG_ENTRY, date_entry) VALUES ('TABLE BOOK_AUTHORS: A DML OCCURRED', (SELECT SYSDATE FROM DUAL));
END;
/
ALTER TRIGGER "IT011873"."BOOK_AUTHORS_DML_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger BOOK_LENDING_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "IT011873"."BOOK_LENDING_ID_TRG" BEFORE
    INSERT ON book_lending
    FOR EACH ROW
     WHEN ( new.id IS NULL ) BEGIN
    :new.id := book_lending_seq.nextval;
END;

/
ALTER TRIGGER "IT011873"."BOOK_LENDING_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger BOOK_LENDING_DML_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "IT011873"."BOOK_LENDING_DML_TRG" 
BEFORE DELETE OR INSERT OR UPDATE ON BOOK_LENDING 
BEGIN
  INSERT INTO LOG (LOG_ENTRY, date_entry) VALUES ('TABLE BOOK_LENDING: A DML OCCURRED', (SELECT SYSDATE FROM DUAL));
END;
/
ALTER TRIGGER "IT011873"."BOOK_LENDING_DML_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger LEND_CATEGORIES_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "IT011873"."LEND_CATEGORIES_ID_TRG" BEFORE
    INSERT ON lend_categories
    FOR EACH ROW
     WHEN ( new.id IS NULL ) BEGIN
    :new.id := lend_cat_id_seq.nextval;
END;

/
ALTER TRIGGER "IT011873"."LEND_CATEGORIES_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger LEND_CATEGORIES_DML_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "IT011873"."LEND_CATEGORIES_DML_TRG" 
BEFORE DELETE OR INSERT OR UPDATE ON LEND_CATEGORIES 
BEGIN
  INSERT INTO LOG (LOG_ENTRY, date_entry) VALUES ('TABLE LEND_CATEGORIES: A DML OCCURRED', (SELECT SYSDATE FROM DUAL));
END;
/
ALTER TRIGGER "IT011873"."LEND_CATEGORIES_DML_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger LOG_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "IT011873"."LOG_ID_TRG" BEFORE
    INSERT ON log
    FOR EACH ROW
     WHEN ( new.id IS NULL ) BEGIN
    :new.id := log_id_seq.nextval;
END;
/
ALTER TRIGGER "IT011873"."LOG_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger PUBLISHING_HOUSES_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "IT011873"."PUBLISHING_HOUSES_ID_TRG" BEFORE
    INSERT ON publishing_houses
    FOR EACH ROW
     WHEN ( new.id IS NULL ) BEGIN
    :new.id := pub_houses_id_seq.nextval;
END;

/
ALTER TRIGGER "IT011873"."PUBLISHING_HOUSES_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger PUBLISHING_HOUSES_DML_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "IT011873"."PUBLISHING_HOUSES_DML_TRG" 
BEFORE DELETE OR INSERT OR UPDATE ON PUBLISHING_HOUSES 
BEGIN
  INSERT INTO LOG (LOG_ENTRY, date_entry) VALUES ('TABLE PUBLISHING_HOUSES: A DML OCCURRED', (SELECT SYSDATE FROM DUAL));
END;
/
ALTER TRIGGER "IT011873"."PUBLISHING_HOUSES_DML_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger ROLES_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "IT011873"."ROLES_ID_TRG" BEFORE
    INSERT ON roles
    FOR EACH ROW
     WHEN ( new.id IS NULL ) BEGIN
    :new.id := roles_id_seq.nextval;
END;

/
ALTER TRIGGER "IT011873"."ROLES_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger ROLES_HOUSES_DML_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "IT011873"."ROLES_HOUSES_DML_TRG" 
BEFORE DELETE OR INSERT OR UPDATE ON ROLES 
BEGIN
  INSERT INTO LOG (LOG_ENTRY, date_entry) VALUES ('TABLE ROLES: A DML OCCURRED', (SELECT SYSDATE FROM DUAL));
END;
/
ALTER TRIGGER "IT011873"."ROLES_HOUSES_DML_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger USERS_ID_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "IT011873"."USERS_ID_TRG" BEFORE
    INSERT ON users
    FOR EACH ROW
     WHEN ( new.id IS NULL ) BEGIN
    :new.id := users_id_seq.nextval;
END;

/
ALTER TRIGGER "IT011873"."USERS_ID_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Trigger USERS_DML_TRG
--------------------------------------------------------

  CREATE OR REPLACE EDITIONABLE TRIGGER "IT011873"."USERS_DML_TRG" 
BEFORE DELETE OR INSERT OR UPDATE ON USERS 
BEGIN
  INSERT INTO LOG (LOG_ENTRY, date_entry) VALUES ('TABLE USERS: A DML OCCURRED', (SELECT SYSDATE FROM DUAL));
END;
/
ALTER TRIGGER "IT011873"."USERS_DML_TRG" ENABLE;
--------------------------------------------------------
--  DDL for Procedure CALCULATE_LENDING
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "IT011873"."CALCULATE_LENDING" (
    plend_date  IN VARCHAR2,
    pbook_id    IN NUMBER,
    returnprice OUT NUMBER,
    rentdays    OUT NUMBER,
    cat         OUT NUMBER,
    price       OUT NUMBER,
    overprice   OUT NUMBER
) AS
BEGIN
-- FIND THE DAYS
    SELECT
        round(((
            SELECT
                sysdate
            FROM
                dual
        ) - TO_DATE(plend_date, 'DD/MM/YYYY')),
              0)
    INTO rentdays
    FROM
        dual;
    SELECT
        lc.lend_code,
        lc.price,
        lc.overdue_price
    INTO
        cat,
        price,
        overprice
    FROM
        books           b,
        lend_categories lc
    WHERE
            b.id = pbook_id
        AND b.lend_category = lc.id;

    IF ( cat = 1 ) THEN
        IF (rentdays <= 3) THEN
        returnprice := rentdays * price;
        
        ELSE 
        returnprice := 3 * price;
        rentdays := rentdays - 3;
            returnprice := returnprice + (rentdays * overprice);
        END IF;

    ELSIF ( cat = 2 ) THEN
        IF (rentdays <= 5) THEN
        returnprice := rentdays * price;
        
        ELSE 
        returnprice := 5 * price;
        rentdays := rentdays - 5;
            returnprice := returnprice + (rentdays * overprice);
        END IF;

    ELSIF ( cat = 3 ) THEN
        IF (rentdays <= 7) THEN
        returnprice := rentdays * price;
        
        ELSE 
        returnprice := 7 * price;
        rentdays := rentdays - 7;
            returnprice := returnprice + (rentdays * overprice);
        END IF;

    ELSIF ( cat = 4 ) THEN
        IF (rentdays <= 30) THEN
        returnprice := rentdays * price;
        
        ELSE 
        returnprice := 30 * price;
        rentdays := rentdays - 30;
            returnprice := returnprice + (rentdays * overprice);
        END IF;

    END IF;

END calculate_lending;

/
--------------------------------------------------------
--  DDL for Procedure DELETEUSER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "IT011873"."DELETEUSER" (
    puserid IN users.id%TYPE
) AS
BEGIN
    DELETE FROM users
    WHERE
        users.id = puserid;

END deleteuser;

/
--------------------------------------------------------
--  DDL for Procedure INSERTAUTHOR
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "IT011873"."INSERTAUTHOR" (
    pname    IN authors.name%TYPE,
    psurname IN authors.surname%TYPE,
    pcountry IN authors.country%TYPE,
    pbio     IN authors.bio%TYPE
) AS
BEGIN
    INSERT INTO authors (
        name,
        surname,
        country,
        bio
    ) VALUES (
        pname,
        psurname,
        pcountry,
        pbio
    );

END insertauthor;

/
--------------------------------------------------------
--  DDL for Procedure INSERTBOOK
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "IT011873"."INSERTBOOK" (
    pbooksnewid    OUT books.id%TYPE,
    ptitle         IN books.title%TYPE,
    pcategory      IN books.category%TYPE,
    pauthor1       IN book_authors.author_id%TYPE,
    pauthor2       IN book_authors.author_id%TYPE,
    pauthor3       IN book_authors.author_id%TYPE,
    ppublish_date  IN varchar2,
    ppublish_house IN books.publishing_house%TYPE,
    plend_category IN books.lend_category%TYPE,
    pisbn          IN books.isbn%TYPE,
    pstockno       IN books_stock.stock%TYPE
) AS
BEGIN
    INSERT INTO books (
        title,
        category,
        publish_date,
        publishing_house,
        lend_category,
        isbn
    ) VALUES (
        ptitle,
        pcategory,
        --ppublish_date,
        to_date(ppublish_date, 'dd/mm/yyyy'),
        ppublish_house,
        plend_category,
        pisbn
    ) RETURNING books.id INTO pbooksnewid;

    -- Θα μπορούσε να ενσωματωθεί στην insert book αλλά έγινε επίτηδες για να δοκιμάσω και να επιδείξω το κάλεσμα procedure από άλλη procedure
    insert_book_authors(pbooksnewid, pauthor1, pauthor2, pauthor3);
    -- thelei elegxo kai rollback edw an prolabw na to energopoihsw

    INSERT INTO books_stock (
        book_id,
        stock
    ) VALUES (
        pbooksnewid,
        pstockno
    );

END insertbook;

/
--------------------------------------------------------
--  DDL for Procedure INSERTLOG
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "IT011873"."INSERTLOG" (
    logentry IN VARCHAR2
) AS
BEGIN
    INSERT INTO log (
        log_entry,
        date_entry
    ) VALUES (
        logentry,
        (
            SELECT
                sysdate
            FROM
                dual
        )
    );

END insertlog;

/
--------------------------------------------------------
--  DDL for Procedure INSERTUSER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "IT011873"."INSERTUSER" (
    pname         IN users.name%TYPE,
    psurname      IN users.surname%TYPE,
    prole         IN users.role%TYPE,
    pusername     IN users.username%TYPE,
    ppass         IN users.password%TYPE,
    --preg_day      IN users.reg_day%TYPE,
    pmail_address IN users.mail_address%TYPE,
    --pactive       IN users.active%TYPE,
    pnotes        IN users.notes%TYPE
) AS
BEGIN
    INSERT INTO users (
        name,
        surname,
        role,
        username,
        password,
        reg_day,
        mail_address,
        active,
        notes
    ) VALUES (
        pname,
        psurname,
        prole,
        pusername,
        ppass,
        (
            SELECT
                sysdate
            FROM
                dual
        ),
        pmail_address,
        1,
        pnotes
    );

END insertuser;

/
--------------------------------------------------------
--  DDL for Procedure INSERT_BOOK_AUTHORS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "IT011873"."INSERT_BOOK_AUTHORS" (
    pbook_id   IN books.id%TYPE,
    pauth1     IN number,
    pauth2     IN number,
    pauth3     IN number
) AS
BEGIN
    IF pauth1 > 0 THEN -- IDs will never be zeros (sequence based values)
        INSERT INTO book_authors (
            book_id,
            author_id
        ) VALUES (
            pbook_id,
            pauth1
        );

    END IF;

    IF pauth2 > 0 THEN
        INSERT INTO book_authors (
            book_id,
            author_id
        ) VALUES (
            pbook_id,
            pauth2
        );

    END IF;

    IF pauth3 > 0 THEN
        INSERT INTO book_authors (
            book_id,
            author_id
        ) VALUES (
            pbook_id,
            pauth3
        );

    END IF;

END insert_book_authors;

/
--------------------------------------------------------
--  DDL for Procedure INSERT_BOOK_LENDING
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "IT011873"."INSERT_BOOK_LENDING" (
    puser_id      IN book_lending.user_id%TYPE,
    pbook_id      IN book_lending.book_id%TYPE
) AS
BEGIN
    INSERT INTO book_lending (
        user_id,
        book_id,
        lending_date
    ) VALUES (
        puser_id,
        pbook_id,
       (SELECT SYSDATE FROM DUAL)
    );

    IF SQL%rowcount > 0 THEN
        UPDATE books_stock
        SET
            stock = stock - 1
        WHERE
            book_id = pbook_id;

        COMMIT;
    ELSE
        ROLLBACK;
    END IF;

END insert_book_lending;

/
--------------------------------------------------------
--  DDL for Procedure LOGINUSER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "IT011873"."LOGINUSER" (
    pusername   IN users.username%TYPE,
    ppassword   IN users.password%TYPE,
    cursor_user OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN cursor_user FOR SELECT
                                                  id,
                                                  name,
                                                  surname,
                                                  role
                                              FROM
                                                  users
                         WHERE
                                 users.username = pusername
                             AND users.password = ppassword
                             AND users.active = 1;

END loginuser;

/
--------------------------------------------------------
--  DDL for Procedure RETURNBOOK
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "IT011873"."RETURNBOOK" 
(
  PUSER_ID IN NUMBER 
, pbook_id IN NUMBER 
) AS 
BEGIN
  update book_lending set return_date = (SELECT SYSDATE FROM DUAL) where user_id = puser_id and book_id = pbook_id;
  UPDATE books_stock
        SET
            stock = stock + 1
        WHERE
            book_id = pbook_id;
  commit;
  exception
    when others then
        rollback;
        raise;
END RETURNBOOK;

/
--------------------------------------------------------
--  DDL for Procedure RETURN_BOOK_FROM_DELETED_USER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "IT011873"."RETURN_BOOK_FROM_DELETED_USER" (
    puser_id IN users.id%TYPE
) AS
BEGIN
    UPDATE book_lending
    SET
        return_date = (
            SELECT
                sysdate
            FROM
                dual
        )
    WHERE
        user_id = puser_id;

    UPDATE books_stock
    SET
        stock = stock + 1
    WHERE
        book_id IN (
            SELECT
                book_id
            FROM
                book_lending
            WHERE
                user_id = puser_id
        );

    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END return_book_from_deleted_user;

/
--------------------------------------------------------
--  DDL for Procedure SELECTAUTHORS
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "IT011873"."SELECTAUTHORS" (
    pid            IN authors.id%TYPE,
    psearchcat     IN INTEGER,
    psearchterm    IN VARCHAR2,
    cursor_authors OUT SYS_REFCURSOR
) AS
BEGIN
    IF pid = 0 THEN -- show all authors
        IF ( psearchcat = -1 ) THEN
            OPEN cursor_authors FOR SELECT
                                        id,
                                        name,
                                        surname,
                                        country
                                    FROM
                                        authors;

        ELSE
            CASE psearchcat
                WHEN 1 THEN
                    OPEN cursor_authors FOR SELECT
                                                                        id,
                                                                        name,
                                                                        surname,
                                                                        country
                                                                    FROM
                                                                        authors
                                            WHERE
                                                id LIKE '%'
                                                        || psearchterm
                                                        || '%' -- καταργεί το index έτσι αλλά λόγω εφαρμογής οκ... ας το αφήσουμε έτσι
                                            ORDER BY
                                                id;

                WHEN 2 THEN
                    OPEN cursor_authors FOR SELECT
                                                                        id,
                                                                        name,
                                                                        surname,
                                                                        country
                                                                    FROM
                                                                        authors
                                            WHERE
                                                upper(name) LIKE upper('%'
                                                                       || psearchterm
                                                                       || '%')
                                                OR upper(surname) LIKE upper('%'
                                                                             || psearchterm
                                                                             || '%')
                                            ORDER BY
                                                id;

                WHEN 3 THEN
                    OPEN cursor_authors FOR SELECT
                                                                        id,
                                                                        name,
                                                                        surname,
                                                                        country
                                                                    FROM
                                                                        authors
                                            WHERE
                                                upper(country) LIKE upper('%'
                                                             || psearchterm
                                                             || '%')
                                            ORDER BY
                                                id;

            END CASE;
        END IF;

    ELSE -- show the specified user

        OPEN cursor_authors FOR SELECT
                                                            id,
                                                            name,
                                                            surname,
                                                            country
                                                        FROM
                                                            authors
                                WHERE
                                    id = pid;

    END IF;
END selectauthors;

/
--------------------------------------------------------
--  DDL for Procedure SELECTBOOK
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "IT011873"."SELECTBOOK" (
    pbookid         IN books.id%TYPE,
    cursor_book OUT SYS_REFCURSOR
) AS
BEGIN
    IF pbookid > 0 THEN
        OPEN cursor_book FOR SELECT
                                                      b.id,
                                                      b.title,
                                                      b.isbn,
                                                      bs.stock
                                                  FROM
                                                      books       b,
                                                      books_stock bs
                             WHERE
                                     b.id = bs.book_id
                                 AND b.id = pbookid;

    ELSE
        OPEN cursor_book FOR SELECT
                                                      b.id,
                                                      b.title,
                                                      b.isbn,
                                                      bs.stock
                                                  FROM
                                                      books       b,
                                                      books_stock bs
                             WHERE
                                 b.id = bs.book_id
                                 and bs.stock > 0;

    END IF;
END selectbook;

/
--------------------------------------------------------
--  DDL for Procedure SELECTBOOKCAT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "IT011873"."SELECTBOOKCAT" (
    cursor_bookcat OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN cursor_bookcat FOR SELECT
                                id,
                                cat_desc
                            FROM
                                books_categories;

END selectbookcat;

/
--------------------------------------------------------
--  DDL for Procedure SELECTBOOKSEARCH
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "IT011873"."SELECTBOOKSEARCH" (
    psearchcat  IN INTEGER,
    psearchterm IN VARCHAR2,
    cursor_book OUT SYS_REFCURSOR
) AS
BEGIN
    IF psearchcat = 0 THEN
        OPEN cursor_book FOR SELECT
                                                      b.id,
                                                      b.title,
                                                      bc.cat_desc,
                                                      b.publish_date,
                                                      ph.name        AS publish_house,
                                                      b.isbn,
                                                      lc.description AS lend_category
                                                  FROM
                                                      publishing_houses ph,
                                                      books             b,
                                                      lend_categories   lc,
                                                      books_categories  bc
                             WHERE
                                     b.lend_category = lc.id
                                 AND b.category = bc.id
                                 AND b.publishing_house = ph.id;

    ELSIF psearchcat = 1 THEN
        OPEN cursor_book FOR SELECT
                                                      b.id,
                                                      b.title,
                                                      bc.cat_desc,
                                                      b.publish_date,
                                                      ph.name        AS publish_house,
                                                      b.isbn,
                                                      lc.description AS lend_category
                                                  FROM
                                                      publishing_houses ph,
                                                      books             b,
                                                      lend_categories   lc,
                                                      books_categories  bc
                             WHERE
                                     b.lend_category = lc.id
                                 AND b.category = bc.id
                                 AND b.publishing_house = ph.id
                                 AND upper(b.title) LIKE upper( '%'|| pSearchTerm || '%' );

    ELSIF psearchcat = 2 THEN
        OPEN cursor_book FOR SELECT
                                                      b.id,
                                                      b.title,
                                                      bc.cat_desc,
                                                      b.publish_date,
                                                      ph.name        AS publish_house,
                                                      b.isbn,
                                                      lc.description AS lend_category
                                                  FROM
                                                      publishing_houses ph,
                                                      books             b,
                                                      lend_categories   lc,
                                                      books_categories  bc
                             WHERE
                                     b.lend_category = lc.id
                                 AND b.category = bc.id
                                 AND b.publishing_house = ph.id
                                 AND upper(bc.cat_desc) LIKE upper( '%'|| pSearchTerm || '%' );

    ELSIF psearchcat = 3 THEN
        OPEN cursor_book FOR SELECT
                                                      b.id,
                                                      b.title,
                                                      bc.cat_desc,
                                                      b.publish_date,
                                                      ph.name        AS publish_house,
                                                      b.isbn,
                                                      lc.description AS lend_category
                                                  FROM
                                                      publishing_houses ph,
                                                      books             b,
                                                      lend_categories   lc,
                                                      books_categories  bc
                             WHERE
                                     b.lend_category = lc.id
                                 AND b.category = bc.id
                                 AND b.publishing_house = ph.id
                                 AND upper(ph.name) LIKE upper( '%'|| pSearchTerm || '%' );

    ELSIF psearchcat = 4 THEN
        OPEN cursor_book FOR SELECT
                                                      b.id,
                                                      b.title,
                                                      bc.cat_desc,
                                                      b.publish_date,
                                                      ph.name        AS publish_house,
                                                      b.isbn,
                                                      lc.description AS lend_category
                                                  FROM
                                                      publishing_houses ph,
                                                      books             b,
                                                      lend_categories   lc,
                                                      books_categories  bc
                             WHERE
                                     b.lend_category = lc.id
                                 AND b.category = bc.id
                                 AND b.publishing_house = ph.id
                                 AND upper(b.isbn) LIKE upper( '%'|| pSearchTerm || '%' );

    END IF;
END selectbooksearch;

/
--------------------------------------------------------
--  DDL for Procedure SELECTBOOKS_BY_USER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "IT011873"."SELECTBOOKS_BY_USER" (
    puserid     IN users.id%TYPE,
    cursor_book OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN cursor_book FOR SELECT
                                                  b.id,
                                                  b.title,
                                                  b.isbn,
                                                  lc.description,
                                                  bl.lending_date
                                              FROM
                                                  book_lending    bl,
                                                  books           b,
                                                  lend_categories lc
                         WHERE
                                 b.id = bl.book_id
                             AND b.lend_category = lc.id
                             AND bl.user_id = puserid
                             AND bl.return_date IS NULL;

END selectbooks_by_user;

/
--------------------------------------------------------
--  DDL for Procedure SELECTLENDCAT
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "IT011873"."SELECTLENDCAT" (
    cursor_lend_cat OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN cursor_lend_cat FOR SELECT
                                 id,
                                 description,
                                 lend_code
                             FROM
                                 lend_categories;

END selectlendcat;

/
--------------------------------------------------------
--  DDL for Procedure SELECTLOG
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "IT011873"."SELECTLOG" (
    cursor_log OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN cursor_log FOR SELECT
                                                id,
                                                log_entry,
                                                date_entry
                                            FROM
                                                log
                        ORDER BY
                            id DESC;

END selectlog;

/
--------------------------------------------------------
--  DDL for Procedure SELECTPUBHOUSES
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "IT011873"."SELECTPUBHOUSES" (
    cursor_pubhouses OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN cursor_pubhouses FOR SELECT
                                  id,
                                  name,
                                  foundation_date
                              FROM
                                  publishing_houses;

END selectpubhouses;

/
--------------------------------------------------------
--  DDL for Procedure SELECTROLE
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "IT011873"."SELECTROLE" (
    cursor_roles OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN cursor_roles FOR SELECT
                                  id,
                                  role_desc as role,
                                  role_val
                              FROM
                                  roles;

END selectrole;

/
--------------------------------------------------------
--  DDL for Procedure SELECTUSER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "IT011873"."SELECTUSER" (
    pid         IN users.id%TYPE,
    psearchcat  IN INTEGER,
    psearchterm IN VARCHAR2,
    cursor_user OUT SYS_REFCURSOR
) AS
BEGIN
    IF pid = 0 THEN -- show all users
        IF ( psearchcat = -1 ) THEN
            OPEN cursor_user FOR SELECT
                                                          id,
                                                          name,
                                                          surname,
                                                          role,
                                                          username,
                                                          reg_day,
                                                          mail_address,
                                                          active
                                                      FROM
                                                          users
                                 ORDER BY
                                     id;

        ELSE
            CASE psearchcat
                WHEN 1 THEN
                    OPEN cursor_user FOR SELECT
                                                                  id,
                                                                  name,
                                                                  surname,
                                                                  role,
                                                                  username,
                                                                  reg_day,
                                                                  mail_address,
                                                                  active
                                                              FROM
                                                                  users
                                         WHERE
                                             id LIKE '%'
                                                     || psearchterm
                                                     || '%' -- καταργεί το index έτσι αλλά λόγω εφαρμογής οκ... ας το αφήσουμε έτσι
                                         ORDER BY
                                             id;

                WHEN 2 THEN
                    OPEN cursor_user FOR SELECT
                                                                  id,
                                                                  name,
                                                                  surname,
                                                                  role,
                                                                  username,
                                                                  reg_day,
                                                                  mail_address,
                                                                  active
                                                              FROM
                                                                  users
                                         WHERE
                                             upper(name) LIKE upper('%'
                                                                    || psearchterm
                                                                    || '%')
                                             OR upper(surname) LIKE upper('%'
                                                                          || psearchterm
                                                                          || '%')
                                         ORDER BY
                                             id;

                WHEN 3 THEN
                    OPEN cursor_user FOR SELECT
                                                                  id,
                                                                  name,
                                                                  surname,
                                                                  role,
                                                                  username,
                                                                  reg_day,
                                                                  mail_address,
                                                                  active
                                                              FROM
                                                                  users
                                         WHERE
                                             username LIKE '%'
                                                           || psearchterm
                                                           || '%'
                                         ORDER BY
                                             id;

            END CASE;
        END IF;

    ELSE -- show the specified user

        OPEN cursor_user FOR SELECT
                                                      name,
                                                      surname,
                                                      role,
                                                      username,
                                                      reg_day,
                                                      mail_address,
                                                      active,
                                                      notes
                                                  FROM
                                                      users
                             WHERE
                                 id = pid;

    END IF;
END selectuser;

/
--------------------------------------------------------
--  DDL for Procedure UPDATEUSER
--------------------------------------------------------
set define off;

  CREATE OR REPLACE EDITIONABLE PROCEDURE "IT011873"."UPDATEUSER" (
    pid           IN users.id%TYPE,
    pname         IN users.name%TYPE,
    psurname      IN users.surname%TYPE,
    prole         IN users.role%TYPE,
    pmail_address IN users.mail_address%TYPE,
    pactive       IN users.active%TYPE,
    pnotes        IN users.notes%TYPE
) AS
BEGIN
    UPDATE users
    SET
        name = pname,
        surname = psurname,
        role = prole,
        mail_address = pmail_address,
        active = pactive,
        notes = pnotes
    WHERE
        id = pid;

END updateuser;

/
--------------------------------------------------------
--  Constraints for Table AUTHORS
--------------------------------------------------------

  ALTER TABLE "IT011873"."AUTHORS" ADD CONSTRAINT "AUTHORS_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "IT011873"."AUTHORS" MODIFY ("COUNTRY" NOT NULL ENABLE);
  ALTER TABLE "IT011873"."AUTHORS" MODIFY ("SURNAME" NOT NULL ENABLE);
  ALTER TABLE "IT011873"."AUTHORS" MODIFY ("NAME" NOT NULL ENABLE);
  ALTER TABLE "IT011873"."AUTHORS" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table BOOKS
--------------------------------------------------------

  ALTER TABLE "IT011873"."BOOKS" MODIFY ("LEND_CATEGORY" NOT NULL ENABLE);
  ALTER TABLE "IT011873"."BOOKS" ADD CONSTRAINT "BOOKS_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "IT011873"."BOOKS" MODIFY ("PUBLISHING_HOUSE" NOT NULL ENABLE);
  ALTER TABLE "IT011873"."BOOKS" MODIFY ("PUBLISH_DATE" NOT NULL ENABLE);
  ALTER TABLE "IT011873"."BOOKS" MODIFY ("CATEGORY" NOT NULL ENABLE);
  ALTER TABLE "IT011873"."BOOKS" MODIFY ("TITLE" NOT NULL ENABLE);
  ALTER TABLE "IT011873"."BOOKS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "IT011873"."BOOKS" MODIFY ("ISBN" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table BOOKS_CATEGORIES
--------------------------------------------------------

  ALTER TABLE "IT011873"."BOOKS_CATEGORIES" ADD CONSTRAINT "BOOKS_CATEGORIES_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "IT011873"."BOOKS_CATEGORIES" MODIFY ("CAT_DESC" NOT NULL ENABLE);
  ALTER TABLE "IT011873"."BOOKS_CATEGORIES" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table BOOKS_STOCK
--------------------------------------------------------

  ALTER TABLE "IT011873"."BOOKS_STOCK" ADD CONSTRAINT "BOOKS_STOCK_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "IT011873"."BOOKS_STOCK" MODIFY ("STOCK" NOT NULL ENABLE);
  ALTER TABLE "IT011873"."BOOKS_STOCK" MODIFY ("BOOK_ID" NOT NULL ENABLE);
  ALTER TABLE "IT011873"."BOOKS_STOCK" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table BOOK_AUTHORS
--------------------------------------------------------

  ALTER TABLE "IT011873"."BOOK_AUTHORS" ADD CONSTRAINT "BOOK_AUTHORS_UK1" UNIQUE ("BOOK_ID", "AUTHOR_ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "IT011873"."BOOK_AUTHORS" MODIFY ("AUTHOR_ID" NOT NULL ENABLE);
  ALTER TABLE "IT011873"."BOOK_AUTHORS" MODIFY ("BOOK_ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table BOOK_LENDING
--------------------------------------------------------

  ALTER TABLE "IT011873"."BOOK_LENDING" ADD CONSTRAINT "BOOK_LENDING_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "IT011873"."BOOK_LENDING" MODIFY ("LENDING_DATE" NOT NULL ENABLE);
  ALTER TABLE "IT011873"."BOOK_LENDING" MODIFY ("BOOK_ID" NOT NULL ENABLE);
  ALTER TABLE "IT011873"."BOOK_LENDING" MODIFY ("USER_ID" NOT NULL ENABLE);
  ALTER TABLE "IT011873"."BOOK_LENDING" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table LEND_CATEGORIES
--------------------------------------------------------

  ALTER TABLE "IT011873"."LEND_CATEGORIES" ADD CONSTRAINT "LEND_CATEGORIES_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "IT011873"."LEND_CATEGORIES" MODIFY ("OVERDUE_PRICE" NOT NULL ENABLE);
  ALTER TABLE "IT011873"."LEND_CATEGORIES" MODIFY ("PRICE" NOT NULL ENABLE);
  ALTER TABLE "IT011873"."LEND_CATEGORIES" MODIFY ("LEND_CODE" NOT NULL ENABLE);
  ALTER TABLE "IT011873"."LEND_CATEGORIES" MODIFY ("DESCRIPTION" NOT NULL ENABLE);
  ALTER TABLE "IT011873"."LEND_CATEGORIES" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table LOG
--------------------------------------------------------

  ALTER TABLE "IT011873"."LOG" MODIFY ("DATE_ENTRY" NOT NULL ENABLE);
  ALTER TABLE "IT011873"."LOG" ADD CONSTRAINT "LOG_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "IT011873"."LOG" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "IT011873"."LOG" MODIFY ("LOG_ENTRY" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table PUBLISHING_HOUSES
--------------------------------------------------------

  ALTER TABLE "IT011873"."PUBLISHING_HOUSES" ADD CONSTRAINT "PUBLISH_HOUSES_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "IT011873"."PUBLISHING_HOUSES" MODIFY ("NAME" NOT NULL ENABLE);
  ALTER TABLE "IT011873"."PUBLISHING_HOUSES" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table ROLES
--------------------------------------------------------

  ALTER TABLE "IT011873"."ROLES" ADD CONSTRAINT "ROLES__UNV1" UNIQUE ("ROLE_VAL")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "IT011873"."ROLES" ADD CONSTRAINT "ROLES__UN" UNIQUE ("ROLE_DESC")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "IT011873"."ROLES" ADD CONSTRAINT "ROLES_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "IT011873"."ROLES" MODIFY ("ROLE_VAL" NOT NULL ENABLE);
  ALTER TABLE "IT011873"."ROLES" MODIFY ("ROLE_DESC" NOT NULL ENABLE);
  ALTER TABLE "IT011873"."ROLES" MODIFY ("ID" NOT NULL ENABLE);
--------------------------------------------------------
--  Constraints for Table USERS
--------------------------------------------------------

  ALTER TABLE "IT011873"."USERS" ADD CONSTRAINT "USERS_PK" PRIMARY KEY ("ID")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
  ALTER TABLE "IT011873"."USERS" MODIFY ("ACTIVE" NOT NULL ENABLE);
  ALTER TABLE "IT011873"."USERS" MODIFY ("MAIL_ADDRESS" NOT NULL ENABLE);
  ALTER TABLE "IT011873"."USERS" MODIFY ("REG_DAY" NOT NULL ENABLE);
  ALTER TABLE "IT011873"."USERS" MODIFY ("PASSWORD" NOT NULL ENABLE);
  ALTER TABLE "IT011873"."USERS" MODIFY ("USERNAME" NOT NULL ENABLE);
  ALTER TABLE "IT011873"."USERS" MODIFY ("ROLE" NOT NULL ENABLE);
  ALTER TABLE "IT011873"."USERS" MODIFY ("SURNAME" NOT NULL ENABLE);
  ALTER TABLE "IT011873"."USERS" MODIFY ("NAME" NOT NULL ENABLE);
  ALTER TABLE "IT011873"."USERS" MODIFY ("ID" NOT NULL ENABLE);
  ALTER TABLE "IT011873"."USERS" ADD CONSTRAINT "USERS__UN" UNIQUE ("USERNAME")
  USING INDEX PCTFREE 10 INITRANS 2 MAXTRANS 255 COMPUTE STATISTICS 
  STORAGE(INITIAL 65536 NEXT 1048576 MINEXTENTS 1 MAXEXTENTS 2147483645
  PCTINCREASE 0 FREELISTS 1 FREELIST GROUPS 1
  BUFFER_POOL DEFAULT FLASH_CACHE DEFAULT CELL_FLASH_CACHE DEFAULT)
  TABLESPACE "USERS"  ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table BOOKS
--------------------------------------------------------

  ALTER TABLE "IT011873"."BOOKS" ADD CONSTRAINT "BOOKS_CATEGORIES_FK" FOREIGN KEY ("CATEGORY")
	  REFERENCES "IT011873"."BOOKS_CATEGORIES" ("ID") ENABLE;
  ALTER TABLE "IT011873"."BOOKS" ADD CONSTRAINT "BOOKS_PUBLISH_HOUSES_FK" FOREIGN KEY ("PUBLISHING_HOUSE")
	  REFERENCES "IT011873"."PUBLISHING_HOUSES" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table BOOKS_CATEGORIES
--------------------------------------------------------

  ALTER TABLE "IT011873"."BOOKS_CATEGORIES" ADD CONSTRAINT "BOOKS_CATEGORIES_FKV2" FOREIGN KEY ("ID")
	  REFERENCES "IT011873"."BOOKS_CATEGORIES" ("ID") ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table BOOKS_STOCK
--------------------------------------------------------

  ALTER TABLE "IT011873"."BOOKS_STOCK" ADD CONSTRAINT "BOOKS_STOCK_FK1" FOREIGN KEY ("BOOK_ID")
	  REFERENCES "IT011873"."BOOKS" ("ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table BOOK_AUTHORS
--------------------------------------------------------

  ALTER TABLE "IT011873"."BOOK_AUTHORS" ADD CONSTRAINT "BOOK_AUTHORS_AUTHORS_FK" FOREIGN KEY ("AUTHOR_ID")
	  REFERENCES "IT011873"."AUTHORS" ("ID") ENABLE;
  ALTER TABLE "IT011873"."BOOK_AUTHORS" ADD CONSTRAINT "BOOK_AUTHORS_BOOKS_FK" FOREIGN KEY ("BOOK_ID")
	  REFERENCES "IT011873"."BOOKS" ("ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table BOOK_LENDING
--------------------------------------------------------

  ALTER TABLE "IT011873"."BOOK_LENDING" ADD CONSTRAINT "BOOK_LENDING_BOOKS_FK" FOREIGN KEY ("BOOK_ID")
	  REFERENCES "IT011873"."BOOKS" ("ID") ENABLE;
  ALTER TABLE "IT011873"."BOOK_LENDING" ADD CONSTRAINT "BOOK_LENDING_USERS_FK" FOREIGN KEY ("USER_ID")
	  REFERENCES "IT011873"."USERS" ("ID") ON DELETE CASCADE ENABLE;
--------------------------------------------------------
--  Ref Constraints for Table USERS
--------------------------------------------------------

  ALTER TABLE "IT011873"."USERS" ADD CONSTRAINT "TABLE_16_ROLES_FK" FOREIGN KEY ("ROLE")
	  REFERENCES "IT011873"."ROLES" ("ID") ENABLE;
